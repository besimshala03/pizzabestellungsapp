<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-07-01" filename="edit_item_page.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.0" lines-covered="0" lines-valid="115" package="screen" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'package:flutter/material.dart';</code>
        </line>
        <line number="2">
            <code>import 'package:http/http.dart' as http;</code>
        </line>
        <line number="3">
            <code>import 'package:project_10_frontend/backend/backend.dart';</code>
        </line>
        <line number="4">
            <code>import 'package:project_10_frontend/model/Bestellung.dart';</code>
        </line>
        <line number="5">
            <code>import 'package:project_10_frontend/screen/edit_pizza_page.dart';</code>
        </line>
        <line number="6">
            <code>import 'package:project_10_frontend/screen/main_page.dart'; // Import the main page</code>
        </line>
        <line number="7">
            <code/>
        </line>
        <line number="8">
            <code>class BestellungDetailsWidget extends StatefulWidget {</code>
        </line>
        <line number="9">
            <code>  final int bestellungId;</code>
        </line>
        <line number="10">
            <code>  final Backend backend;</code>
        </line>
        <line number="11">
            <code>  final http.Client client;</code>
        </line>
        <line number="12">
            <code/>
        </line>
        <line hits="0" number="13">
            <code>  const BestellungDetailsWidget({super.key, required this.bestellungId, required this.backend, required this.client});</code>
        </line>
        <line number="14">
            <code/>
        </line>
        <line hits="0" number="15">
            <code>  @override</code>
        </line>
        <line hits="0" number="16">
            <code>  _BestellungDetailsWidgetState createState() =&gt; _BestellungDetailsWidgetState();</code>
        </line>
        <line number="17">
            <code>}</code>
        </line>
        <line number="18">
            <code/>
        </line>
        <line number="19">
            <code>class _BestellungDetailsWidgetState extends State&lt;BestellungDetailsWidget&gt; {</code>
        </line>
        <line number="20">
            <code>  late Future&lt;Bestellung&gt; futureBestellung;</code>
        </line>
        <line number="21">
            <code>  bool isExpanded = false;</code>
        </line>
        <line number="22">
            <code/>
        </line>
        <line number="23">
            <code>  final _nameController = TextEditingController();</code>
        </line>
        <line number="24">
            <code>  final _addressController = TextEditingController();</code>
        </line>
        <line number="25">
            <code>  final _timeController = TextEditingController(); // Controller for order time</code>
        </line>
        <line number="26">
            <code/>
        </line>
        <line hits="0" number="27">
            <code>  @override</code>
        </line>
        <line number="28">
            <code>  void initState() {</code>
        </line>
        <line hits="0" number="29">
            <code>    super.initState();</code>
        </line>
        <line hits="0" number="30">
            <code>    futureBestellung = Backend().fetchBestellungById(http.Client(), widget.bestellungId).then((bestellung) {</code>
        </line>
        <line hits="0" number="31">
            <code>      _nameController.text = bestellung.adresse;</code>
        </line>
        <line hits="0" number="32">
            <code>      _addressController.text = bestellung.kundenname;</code>
        </line>
        <line hits="0" number="33">
            <code>      _timeController.text = bestellung.datumUhrzeit; // Assuming 'bestellzeit' is the correct field</code>
        </line>
        <line number="34">
            <code>      return bestellung;</code>
        </line>
        <line number="35">
            <code>    });</code>
        </line>
        <line number="36">
            <code>  }</code>
        </line>
        <line number="37">
            <code/>
        </line>
        <line hits="0" number="38">
            <code>  void _saveChanges(Bestellung bestellung) async {</code>
        </line>
        <line hits="0" number="39">
            <code>    final updatedBestellungDetails = {</code>
        </line>
        <line hits="0" number="40">
            <code>      'kundenname': _addressController.text,</code>
        </line>
        <line hits="0" number="41">
            <code>      'adresse': _nameController.text,</code>
        </line>
        <line hits="0" number="42">
            <code>      'datumUhrzeit': _timeController.text,</code>
        </line>
        <line hits="0" number="43">
            <code>      'pizza': bestellung.pizza.map((pizza) =&gt; {</code>
        </line>
        <line hits="0" number="44">
            <code>        'id': pizza.id,</code>
        </line>
        <line hits="0" number="45">
            <code>        'name': pizza.name,</code>
        </line>
        <line hits="0" number="46">
            <code>        'beschreibung': pizza.beschreibung,</code>
        </line>
        <line hits="0" number="47">
            <code>        'preis': pizza.preis,</code>
        </line>
        <line hits="0" number="48">
            <code>        'imageUrl': pizza.imageUrl,</code>
        </line>
        <line hits="0" number="49">
            <code>        'zutaten': pizza.zutaten.map((zutat) =&gt; {</code>
        </line>
        <line hits="0" number="50">
            <code>          'id': zutat.id,</code>
        </line>
        <line hits="0" number="51">
            <code>          'name': zutat.name,</code>
        </line>
        <line hits="0" number="52">
            <code>          'preis': zutat.preis,</code>
        </line>
        <line hits="0" number="53">
            <code>        }).toList(),</code>
        </line>
        <line hits="0" number="54">
            <code>      }).toList(),</code>
        </line>
        <line hits="0" number="55">
            <code>      'getraenke': bestellung.getraenke.map((getraenk) =&gt; {</code>
        </line>
        <line hits="0" number="56">
            <code>        'id': getraenk.id,</code>
        </line>
        <line hits="0" number="57">
            <code>        'name': getraenk.name,</code>
        </line>
        <line hits="0" number="58">
            <code>        'preis': getraenk.preis,</code>
        </line>
        <line hits="0" number="59">
            <code>        'imageUrl': getraenk.imageUrl,</code>
        </line>
        <line hits="0" number="60">
            <code>      }).toList(),</code>
        </line>
        <line hits="0" number="61">
            <code>      'preis': bestellung.preis,</code>
        </line>
        <line number="62">
            <code>    };</code>
        </line>
        <line number="63">
            <code/>
        </line>
        <line number="64">
            <code>    try {</code>
        </line>
        <line hits="0" number="65">
            <code>      await Backend().updateBestellung(http.Client(), widget.bestellungId, updatedBestellungDetails);</code>
        </line>
        <line hits="0" number="66">
            <code>      ScaffoldMessenger.of(context).showSnackBar(</code>
        </line>
        <line hits="0" number="67">
            <code>        SnackBar(content: Text('Ã„nderungen gespeichert')),</code>
        </line>
        <line number="68">
            <code>      );</code>
        </line>
        <line hits="0" number="69">
            <code>      Navigator.pushReplacement(</code>
        </line>
        <line hits="0" number="70">
            <code>        context,</code>
        </line>
        <line hits="0" number="71">
            <code>        MaterialPageRoute(builder: (context) =&gt; MainPage(Backend(), widget.client)), // Navigate back to the main page</code>
        </line>
        <line number="72">
            <code>      );</code>
        </line>
        <line number="73">
            <code>    } catch (e) {</code>
        </line>
        <line hits="0" number="74">
            <code>      ScaffoldMessenger.of(context).showSnackBar(</code>
        </line>
        <line hits="0" number="75">
            <code>        SnackBar(content: Text('Fehler beim Speichern der Ã„nderungen')),</code>
        </line>
        <line number="76">
            <code>      );</code>
        </line>
        <line number="77">
            <code>    }</code>
        </line>
        <line number="78">
            <code>  }</code>
        </line>
        <line number="79">
            <code/>
        </line>
        <line hits="0" number="80">
            <code>  @override</code>
        </line>
        <line number="81">
            <code>  Widget build(BuildContext context) {</code>
        </line>
        <line hits="0" number="82">
            <code>    return Scaffold(</code>
        </line>
        <line hits="0" number="83">
            <code>      appBar: AppBar(</code>
        </line>
        <line hits="0" number="84">
            <code>        title: Text('Bestellung Details'),</code>
        </line>
        <line number="85">
            <code>      ),</code>
        </line>
        <line hits="0" number="86">
            <code>      body: FutureBuilder&lt;Bestellung&gt;(</code>
        </line>
        <line hits="0" number="87">
            <code>        future: futureBestellung,</code>
        </line>
        <line hits="0" number="88">
            <code>        builder: (context, snapshot) {</code>
        </line>
        <line hits="0" number="89">
            <code>          if (snapshot.connectionState == ConnectionState.waiting) {</code>
        </line>
        <line hits="0" number="90">
            <code>            return Center(child: CircularProgressIndicator());</code>
        </line>
        <line hits="0" number="91">
            <code>          } else if (snapshot.hasError) {</code>
        </line>
        <line hits="0" number="92">
            <code>            return Center(child: Text('Fehler: ${snapshot.error}'));</code>
        </line>
        <line number="93">
            <code>          }</code>
        </line>
        <line number="94">
            <code/>
        </line>
        <line hits="0" number="95">
            <code>          final bestellung = snapshot.data!;</code>
        </line>
        <line hits="0" number="96">
            <code>          return SingleChildScrollView(</code>
        </line>
        <line hits="0" number="97">
            <code>            child: Center(</code>
        </line>
        <line hits="0" number="98">
            <code>              child: Column(</code>
        </line>
        <line number="99">
            <code>                mainAxisAlignment: MainAxisAlignment.center,</code>
        </line>
        <line number="100">
            <code>                crossAxisAlignment: CrossAxisAlignment.center,</code>
        </line>
        <line hits="0" number="101">
            <code>                children: [</code>
        </line>
        <line hits="0" number="102">
            <code>                  Padding(</code>
        </line>
        <line number="103">
            <code>                    padding: const EdgeInsets.all(8.0),</code>
        </line>
        <line hits="0" number="104">
            <code>                    child: TextFormField(</code>
        </line>
        <line hits="0" number="105">
            <code>                      controller: _nameController,</code>
        </line>
        <line hits="0" number="106">
            <code>                      decoration: InputDecoration(</code>
        </line>
        <line number="107">
            <code>                        labelText: 'Kundenname',</code>
        </line>
        <line hits="0" number="108">
            <code>                        border: OutlineInputBorder(),</code>
        </line>
        <line number="109">
            <code>                      ),</code>
        </line>
        <line number="110">
            <code>                    ),</code>
        </line>
        <line number="111">
            <code>                  ),</code>
        </line>
        <line hits="0" number="112">
            <code>                  Padding(</code>
        </line>
        <line number="113">
            <code>                    padding: const EdgeInsets.all(8.0),</code>
        </line>
        <line hits="0" number="114">
            <code>                    child: TextFormField(</code>
        </line>
        <line hits="0" number="115">
            <code>                      controller: _addressController,</code>
        </line>
        <line hits="0" number="116">
            <code>                      decoration: InputDecoration(</code>
        </line>
        <line number="117">
            <code>                        labelText: 'Adresse',</code>
        </line>
        <line hits="0" number="118">
            <code>                        border: OutlineInputBorder(),</code>
        </line>
        <line number="119">
            <code>                      ),</code>
        </line>
        <line number="120">
            <code>                    ),</code>
        </line>
        <line number="121">
            <code>                  ),</code>
        </line>
        <line hits="0" number="122">
            <code>                  Padding(</code>
        </line>
        <line number="123">
            <code>                    padding: const EdgeInsets.all(8.0),</code>
        </line>
        <line hits="0" number="124">
            <code>                    child: TextFormField(</code>
        </line>
        <line hits="0" number="125">
            <code>                      controller: _timeController,</code>
        </line>
        <line hits="0" number="126">
            <code>                      decoration: InputDecoration(</code>
        </line>
        <line number="127">
            <code>                        labelText: 'Bestellzeit',</code>
        </line>
        <line hits="0" number="128">
            <code>                        border: OutlineInputBorder(),</code>
        </line>
        <line number="129">
            <code>                      ),</code>
        </line>
        <line number="130">
            <code>                      readOnly: true, // Make the time field read-only</code>
        </line>
        <line number="131">
            <code>                    ),</code>
        </line>
        <line number="132">
            <code>                  ),</code>
        </line>
        <line hits="0" number="133">
            <code>                  ElevatedButton(</code>
        </line>
        <line hits="0" number="134">
            <code>                    onPressed: () {</code>
        </line>
        <line hits="0" number="135">
            <code>                      setState(() {</code>
        </line>
        <line hits="0" number="136">
            <code>                        isExpanded = !isExpanded;</code>
        </line>
        <line number="137">
            <code>                      });</code>
        </line>
        <line number="138">
            <code>                    },</code>
        </line>
        <line hits="0" number="139">
            <code>                    child: Text(isExpanded ? 'Weniger anzeigen' : 'Mehr anzeigen'),</code>
        </line>
        <line number="140">
            <code>                  ),</code>
        </line>
        <line hits="0" number="141">
            <code>                  if (isExpanded) ...[</code>
        </line>
        <line hits="0" number="142">
            <code>                    ...bestellung.pizza.map((pizza) =&gt; ListTile(</code>
        </line>
        <line hits="0" number="143">
            <code>                      leading: Image.asset('assets/Pizza_Bilder/${pizza.imageUrl}', width: 50, height: 50),</code>
        </line>
        <line hits="0" number="144">
            <code>                      title: Text(pizza.name),</code>
        </line>
        <line hits="0" number="145">
            <code>                      subtitle: Text('${pizza.preis}â‚¬ - Pizza'),</code>
        </line>
        <line hits="0" number="146">
            <code>                      trailing: Row(</code>
        </line>
        <line number="147">
            <code>                        mainAxisSize: MainAxisSize.min,</code>
        </line>
        <line hits="0" number="148">
            <code>                        children: [</code>
        </line>
        <line hits="0" number="149">
            <code>                          IconButton(</code>
        </line>
        <line hits="0" number="150">
            <code>                            icon: Icon(Icons.edit),</code>
        </line>
        <line hits="0" number="151">
            <code>                            onPressed: () {</code>
        </line>
        <line number="152">
            <code>                              // Edit action here</code>
        </line>
        <line hits="0" number="153">
            <code>Navigator.of(context).push(</code>
        </line>
        <line hits="0" number="154">
            <code>  MaterialPageRoute(</code>
        </line>
        <line hits="0" number="155">
            <code>    builder: (context) =&gt; EditPizzaScreen(</code>
        </line>
        <line hits="0" number="156">
            <code>      pizzaId: pizza.id,</code>
        </line>
        <line hits="0" number="157">
            <code>      backend: Backend(),</code>
        </line>
        <line hits="0" number="158">
            <code>      client: http.Client(),</code>
        </line>
        <line number="159">
            <code>    ),</code>
        </line>
        <line number="160">
            <code>  ),</code>
        </line>
        <line number="161">
            <code>);</code>
        </line>
        <line number="162">
            <code>                            },</code>
        </line>
        <line number="163">
            <code>                          ),</code>
        </line>
        <line hits="0" number="164">
            <code>                          IconButton(</code>
        </line>
        <line hits="0" number="165">
            <code>                            icon: Icon(Icons.delete),</code>
        </line>
        <line hits="0" number="166">
            <code>                            onPressed: () {</code>
        </line>
        <line number="167">
            <code>                              // Delete action here</code>
        </line>
        <line hits="0" number="168">
            <code>                              Backend().deletePizzaById(widget.client, pizza.id);</code>
        </line>
        <line hits="0" number="169">
            <code>setState(() {</code>
        </line>
        <line hits="0" number="170">
            <code>                  bestellung.pizza.removeWhere((item) =&gt; item.id == pizza.id);</code>
        </line>
        <line number="171">
            <code>                });                            },</code>
        </line>
        <line number="172">
            <code>                          ),</code>
        </line>
        <line number="173">
            <code>                        ],</code>
        </line>
        <line number="174">
            <code>                      ),</code>
        </line>
        <line hits="0" number="175">
            <code>                    )).toList(),</code>
        </line>
        <line hits="0" number="176">
            <code>                    ...bestellung.getraenke.map((getraenk) =&gt; ListTile(</code>
        </line>
        <line hits="0" number="177">
            <code>                      leading: Image.asset('assets/Getreanke_Bilder/${getraenk.imageUrl}', width: 50, height: 50),</code>
        </line>
        <line hits="0" number="178">
            <code>                      title: Text(getraenk.name),</code>
        </line>
        <line hits="0" number="179">
            <code>                      subtitle: Text('${getraenk.preis}â‚¬ - GetrÃ¤nk'),</code>
        </line>
        <line hits="0" number="180">
            <code>                      trailing: IconButton(</code>
        </line>
        <line hits="0" number="181">
            <code>                        icon: Icon(Icons.delete),</code>
        </line>
        <line hits="0" number="182">
            <code>                        onPressed: () {</code>
        </line>
        <line number="183">
            <code>                          // Delete action here</code>
        </line>
        <line hits="0" number="184">
            <code>                          Backend().deleteGetraenkeById(widget.client, getraenk.id);</code>
        </line>
        <line hits="0" number="185">
            <code> setState(() {</code>
        </line>
        <line hits="0" number="186">
            <code>                  bestellung.getraenke.removeWhere((item) =&gt; item.id == getraenk.id);</code>
        </line>
        <line number="187">
            <code>                });                        },</code>
        </line>
        <line number="188">
            <code>                      ),</code>
        </line>
        <line hits="0" number="189">
            <code>                    )).toList(),</code>
        </line>
        <line number="190">
            <code>                  ],</code>
        </line>
        <line hits="0" number="191">
            <code>                  Padding(</code>
        </line>
        <line number="192">
            <code>                    padding: const EdgeInsets.all(8.0),</code>
        </line>
        <line hits="0" number="193">
            <code>                    child: ElevatedButton(</code>
        </line>
        <line hits="0" number="194">
            <code>                      onPressed: () =&gt; _saveChanges(bestellung),</code>
        </line>
        <line hits="0" number="195">
            <code>                      child: Text('Ã„nderungen speichern'),</code>
        </line>
        <line number="196">
            <code>                    ),</code>
        </line>
        <line number="197">
            <code>                  ),</code>
        </line>
        <line number="198">
            <code>                ],</code>
        </line>
        <line number="199">
            <code>              ),</code>
        </line>
        <line number="200">
            <code>            ),</code>
        </line>
        <line number="201">
            <code>          );</code>
        </line>
        <line number="202">
            <code>        },</code>
        </line>
        <line number="203">
            <code>      ),</code>
        </line>
        <line number="204">
            <code>    );</code>
        </line>
        <line number="205">
            <code>  }</code>
        </line>
        <line number="206">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
