<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-07-01" filename="edit_pizza_page.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.8455285" lines-covered="104" lines-valid="123" package="screen" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'package:flutter/material.dart';</code>
        </line>
        <line number="2">
            <code>import 'package:project_10_frontend/backend/backend.dart';</code>
        </line>
        <line number="3">
            <code>import 'package:project_10_frontend/model/pizza.dart';</code>
        </line>
        <line number="4">
            <code>import 'package:project_10_frontend/model/zutaten.dart';</code>
        </line>
        <line number="5">
            <code>import 'package:http/http.dart' as http;</code>
        </line>
        <line number="6">
            <code>// import 'dart:convert';</code>
        </line>
        <line number="7">
            <code/>
        </line>
        <line number="8">
            <code>class EditPizzaScreen extends StatefulWidget {</code>
        </line>
        <line number="9">
            <code>  final int pizzaId;</code>
        </line>
        <line number="10">
            <code>  final Backend backend;</code>
        </line>
        <line number="11">
            <code>  final http.Client client;</code>
        </line>
        <line number="12">
            <code/>
        </line>
        <line hits="1" number="13">
            <code>  EditPizzaScreen({required this.pizzaId, required this.backend, required this.client});</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="14">
            <code/>
        </line>
        <line hits="1" number="15">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="16">
            <code>  _EditPizzaScreenState createState() =&gt; _EditPizzaScreenState();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="17">
            <code>}</code>
        </line>
        <line number="18">
            <code/>
        </line>
        <line number="19">
            <code>class _EditPizzaScreenState extends State&lt;EditPizzaScreen&gt; {</code>
        </line>
        <line number="20">
            <code>  late Future&lt;Pizza&gt; futurePizza;</code>
        </line>
        <line number="21">
            <code>  List&lt;Zutaten&gt; availableZutaten = [];</code>
        </line>
        <line number="22">
            <code>  List&lt;Zutaten&gt; selectedZutaten = [];</code>
        </line>
        <line hits="1" number="23">
            <code>  late double totalPrice = 0;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="24">
            <code>  late Pizza pizza;</code>
        </line>
        <line number="25">
            <code/>
        </line>
        <line hits="1" number="26">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="27">
            <code>  void initState() {</code>
        </line>
        <line hits="1" number="28">
            <code>    super.initState();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="29">
            <code>    futurePizza = widget.backend.fetchPizzaById(widget.client, widget.pizzaId).then((loadedPizza) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="30">
            <code>      pizza = loadedPizza;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="31">
            <code>      totalPrice = pizza.preis;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="32">
            <code>      selectedZutaten = List.from(pizza.zutaten); // Ensure it's a new list</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="33">
            <code>      _loadZutaten();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="34">
            <code>      return pizza;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="35">
            <code>    });</code>
        </line>
        <line number="36">
            <code>  }</code>
        </line>
        <line number="37">
            <code/>
        </line>
        <line hits="1" number="38">
            <code>  void _loadZutaten() async {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="39">
            <code>    try {</code>
        </line>
        <line hits="5" number="40">
            <code>      List&lt;Zutaten&gt; zutaten = await widget.backend.fetchZutatenData(widget.client);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="41">
            <code>      setState(() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="42">
            <code>        availableZutaten = zutaten;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="43">
            <code>      });</code>
        </line>
        <line number="44">
            <code>    } catch (e) {</code>
        </line>
        <line hits="0" number="45">
            <code>      print('Fehler beim Laden der Zutaten: $e');</code>
        </line>
        <line number="46">
            <code>    }</code>
        </line>
        <line number="47">
            <code>  }</code>
        </line>
        <line number="48">
            <code/>
        </line>
        <line hits="1" number="49">
            <code>  void _toggleZutat(Zutaten zutat) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="50">
            <code>    setState(() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="51">
            <code>      final existingIndex = selectedZutaten.indexWhere((selected) =&gt; selected.name == zutat.name);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="52">
            <code>      if (existingIndex &gt;= 0) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="53">
            <code>        selectedZutaten.removeAt(existingIndex);</code>
        </line>
        <line hits="0" number="54">
            <code>        totalPrice -= zutat.preis;</code>
        </line>
        <line number="55">
            <code>      } else {</code>
        </line>
        <line hits="2" number="56">
            <code>        selectedZutaten.add(zutat);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="57">
            <code>        totalPrice += zutat.preis;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="58">
            <code>      }</code>
        </line>
        <line number="59">
            <code>    });</code>
        </line>
        <line number="60">
            <code>  }</code>
        </line>
        <line number="61">
            <code/>
        </line>
        <line hits="1" number="62">
            <code>  void _saveChanges() async {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="63">
            <code>    try {</code>
        </line>
        <line number="64">
            <code>      // Berechne den neuen Gesamtpreis basierend auf den initialen Preis der Pizza und den ausgewÃ¤hlten Zutaten</code>
        </line>
        <line hits="8" number="65">
            <code>      double updatedPrice = pizza.preis + selectedZutaten.fold(0.0, (sum, zutat) =&gt; sum + zutat.preis);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line number="66">
            <code/>
        </line>
        <line number="67">
            <code>      // Erstelle eine neue Pizza-Instanz mit aktualisierten Zutaten und dem korrekten Preis</code>
        </line>
        <line hits="2" number="68">
            <code>      pizza = Pizza(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="69">
            <code>        id: pizza.id,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="70">
            <code>        name: pizza.name,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="71">
            <code>        beschreibung: pizza.beschreibung,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="72">
            <code>        preis: updatedPrice,</code>
        </line>
        <line hits="2" number="73">
            <code>        imageUrl: pizza.imageUrl,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="74">
            <code>        zutaten: List.from(selectedZutaten),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="75">
            <code>      );</code>
        </line>
        <line number="76">
            <code/>
        </line>
        <line hits="3" number="77">
            <code>      print(pizza.toJson()); // Zum Debuggen</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="78">
            <code/>
        </line>
        <line number="79">
            <code>      // LÃ¶sche die Zutaten der Pizza</code>
        </line>
        <line hits="6" number="80">
            <code>      final deleteResponse = await widget.backend.deleteZutatenByPizza(widget.client, pizza);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="81">
            <code>      if (deleteResponse.statusCode != 200) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="82">
            <code>        throw Exception('Failed to delete ingredients. Status code: ${deleteResponse.statusCode}, Body: ${deleteResponse.body}');</code>
        </line>
        <line number="83">
            <code>      }</code>
        </line>
        <line number="84">
            <code/>
        </line>
        <line number="85">
            <code>      // Aktualisiere die Pizza-Daten im Backend</code>
        </line>
        <line hits="8" number="86">
            <code>      final updateResponse = await widget.backend.updatePizzaById(widget.client, widget.pizzaId, pizza);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="87">
            <code>      if (updateResponse.statusCode == 200) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="88">
            <code>        // Zeige eine Erfolgsmeldung an</code>
        </line>
        <line hits="3" number="89">
            <code>        ScaffoldMessenger.of(context).showSnackBar(</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="90">
            <code>          SnackBar(content: Text('Ã„nderungen gespeichert')),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="91">
            <code>        );</code>
        </line>
        <line number="92">
            <code/>
        </line>
        <line number="93">
            <code>        // Navigiere zurÃ¼ck</code>
        </line>
        <line hits="2" number="94">
            <code>        Navigator.pop(context);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="95">
            <code>      } else {</code>
        </line>
        <line hits="0" number="96">
            <code>        throw Exception('Failed to update pizza. Status code: ${updateResponse.statusCode}, Body: ${updateResponse.body}');</code>
        </line>
        <line number="97">
            <code>      }</code>
        </line>
        <line number="98">
            <code>    } catch (e) {</code>
        </line>
        <line number="99">
            <code>      // Fehlerbehandlung und Anzeige einer detaillierteren Fehlermeldung</code>
        </line>
        <line hits="0" number="100">
            <code>      String errorMessage = 'Fehler beim Speichern der Ã„nderungen: $e';</code>
        </line>
        <line hits="0" number="101">
            <code>      if (e is http.ClientException) {</code>
        </line>
        <line hits="0" number="102">
            <code>        errorMessage = 'Netzwerkfehler: $e';</code>
        </line>
        <line number="103">
            <code>      }</code>
        </line>
        <line number="104">
            <code/>
        </line>
        <line hits="0" number="105">
            <code>      ScaffoldMessenger.of(context).showSnackBar(</code>
        </line>
        <line hits="0" number="106">
            <code>        SnackBar(content: Text(errorMessage)),</code>
        </line>
        <line number="107">
            <code>      );</code>
        </line>
        <line number="108">
            <code/>
        </line>
        <line number="109">
            <code>      // Optional: Fehlerprotokollierung fÃ¼r Debugging-Zwecke</code>
        </line>
        <line hits="0" number="110">
            <code>      print('Fehler beim Aktualisieren der Pizza: $e');</code>
        </line>
        <line number="111">
            <code>    }</code>
        </line>
        <line number="112">
            <code>  }</code>
        </line>
        <line number="113">
            <code/>
        </line>
        <line hits="1" number="114">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="115">
            <code>  Widget build(BuildContext context) {</code>
        </line>
        <line hits="1" number="116">
            <code>    return Scaffold(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="117">
            <code>      appBar: AppBar(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="118">
            <code>        backgroundColor: Colors.transparent,</code>
        </line>
        <line number="119">
            <code>        elevation: 0,</code>
        </line>
        <line hits="1" number="120">
            <code>        leading: IconButton(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="121">
            <code>          icon: Icon(Icons.close, color: Colors.black),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="122">
            <code>          onPressed: () {</code>
        </line>
        <line hits="0" number="123">
            <code>            Navigator.pop(context);</code>
        </line>
        <line number="124">
            <code>          },</code>
        </line>
        <line number="125">
            <code>        ),</code>
        </line>
        <line hits="1" number="126">
            <code>        actions: [</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="127">
            <code>          IconButton(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="128">
            <code>            icon: Icon(Icons.share, color: Colors.black),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="129">
            <code>            onPressed: () {},</code>
        </line>
        <line number="130">
            <code>          ),</code>
        </line>
        <line number="131">
            <code>        ],</code>
        </line>
        <line number="132">
            <code>      ),</code>
        </line>
        <line number="133">
            <code>      extendBodyBehindAppBar: true,</code>
        </line>
        <line hits="1" number="134">
            <code>      body: FutureBuilder&lt;Pizza&gt;(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="135">
            <code>        future: futurePizza,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="136">
            <code>        builder: (context, snapshot) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="137">
            <code>          if (snapshot.connectionState == ConnectionState.waiting) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="138">
            <code>            return Center(child: CircularProgressIndicator());</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="139">
            <code>          } else if (snapshot.hasError) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="140">
            <code>            return Center(child: Text('Fehler: ${snapshot.error}'));</code>
        </line>
        <line number="141">
            <code>          }</code>
        </line>
        <line number="142">
            <code/>
        </line>
        <line hits="1" number="143">
            <code>          final pizza = snapshot.data!;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="144">
            <code>          return SingleChildScrollView(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="145">
            <code>            child: Column(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="146">
            <code>              crossAxisAlignment: CrossAxisAlignment.start,</code>
        </line>
        <line hits="1" number="147">
            <code>              children: [</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="148">
            <code>                Stack(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="149">
            <code>                  children: [</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="150">
            <code>                    Image.asset(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="151">
            <code>                      'assets/Pizza_Bilder/${pizza.imageUrl}',</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="152">
            <code>                      width: double.infinity,</code>
        </line>
        <line number="153">
            <code>                      height: 250,</code>
        </line>
        <line number="154">
            <code>                      fit: BoxFit.cover,</code>
        </line>
        <line number="155">
            <code>                    ),</code>
        </line>
        <line hits="1" number="156">
            <code>                    Positioned(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="157">
            <code>                      top: 40,</code>
        </line>
        <line number="158">
            <code>                      left: 16,</code>
        </line>
        <line hits="1" number="159">
            <code>                      child: IconButton(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="160">
            <code>                        icon: Icon(Icons.close, color: Colors.white),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="161">
            <code>                        onPressed: () {</code>
        </line>
        <line hits="0" number="162">
            <code>                          Navigator.pop(context);</code>
        </line>
        <line number="163">
            <code>                        },</code>
        </line>
        <line number="164">
            <code>                      ),</code>
        </line>
        <line number="165">
            <code>                    ),</code>
        </line>
        <line hits="1" number="166">
            <code>                    Positioned(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="167">
            <code>                      top: 40,</code>
        </line>
        <line number="168">
            <code>                      right: 16,</code>
        </line>
        <line hits="1" number="169">
            <code>                      child: IconButton(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="170">
            <code>                        icon: Icon(Icons.share, color: Colors.white),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="171">
            <code>                        onPressed: () {},</code>
        </line>
        <line number="172">
            <code>                      ),</code>
        </line>
        <line number="173">
            <code>                    ),</code>
        </line>
        <line number="174">
            <code>                  ],</code>
        </line>
        <line number="175">
            <code>                ),</code>
        </line>
        <line hits="1" number="176">
            <code>                Padding(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="177">
            <code>                  padding: const EdgeInsets.all(16.0),</code>
        </line>
        <line hits="1" number="178">
            <code>                  child: Column(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="179">
            <code>                    crossAxisAlignment: CrossAxisAlignment.start,</code>
        </line>
        <line hits="1" number="180">
            <code>                    children: [</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="181">
            <code>                      Text(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="182">
            <code>                        pizza.name,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="183">
            <code>                        style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="184">
            <code>                      ),</code>
        </line>
        <line hits="1" number="185">
            <code>                      SizedBox(height: 8),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="186">
            <code>                      Text(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="187">
            <code>                        '${pizza.preis.toStringAsFixed(2)} â‚¬',</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="188">
            <code>                        style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="189">
            <code>                      ),</code>
        </line>
        <line hits="1" number="190">
            <code>                      SizedBox(height: 8),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="191">
            <code>                      Text(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="192">
            <code>                        pizza.beschreibung,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="193">
            <code>                        style: TextStyle(fontSize: 16),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="194">
            <code>                      ),</code>
        </line>
        <line hits="1" number="195">
            <code>                      SizedBox(height: 8),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="196">
            <code>                      Text(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="197">
            <code>                        'Zutaten',</code>
        </line>
        <line hits="1" number="198">
            <code>                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="199">
            <code>                      ),</code>
        </line>
        <line hits="1" number="200">
            <code>                      SizedBox(height: 8),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="201">
            <code>                      availableZutaten.isEmpty</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="202">
            <code>                          ? CircularProgressIndicator()</code>
        </line>
        <line hits="1" number="203">
            <code>                          : Column(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="204">
            <code>                              children: availableZutaten.map((zutat) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="205">
            <code>                                bool isSelected = selectedZutaten.any((selected) =&gt; selected.name == zutat.name);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="206">
            <code>                                return ListTile(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="207">
            <code>                                  contentPadding: EdgeInsets.zero,</code>
        </line>
        <line hits="2" number="208">
            <code>                                  title: Text(zutat.name),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="209">
            <code>                                  subtitle: Text('${zutat.preis.toStringAsFixed(2)} â‚¬'),</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="210">
            <code>                                  trailing: isSelected</code>
        </line>
        <line hits="1" number="211">
            <code>                                      ? Icon(Icons.check_box, color: Colors.green)</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="212">
            <code>                                      : Icon(Icons.check_box_outline_blank),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="213">
            <code>                                  onTap: () {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="214">
            <code>                                    _toggleZutat(zutat);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="215">
            <code>                                  },</code>
        </line>
        <line number="216">
            <code>                                );</code>
        </line>
        <line hits="1" number="217">
            <code>                              }).toList(),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="218">
            <code>                            ),</code>
        </line>
        <line number="219">
            <code>                    ],</code>
        </line>
        <line number="220">
            <code>                  ),</code>
        </line>
        <line number="221">
            <code>                ),</code>
        </line>
        <line number="222">
            <code>              ],</code>
        </line>
        <line number="223">
            <code>            ),</code>
        </line>
        <line number="224">
            <code>          );</code>
        </line>
        <line number="225">
            <code>        },</code>
        </line>
        <line number="226">
            <code>      ),</code>
        </line>
        <line hits="1" number="227">
            <code>      bottomNavigationBar: BottomAppBar(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="228">
            <code>        child: Container(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="229">
            <code>          width: double.infinity,</code>
        </line>
        <line number="230">
            <code>          color: Colors.black,</code>
        </line>
        <line hits="1" number="231">
            <code>          child: Padding(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="232">
            <code>            padding: const EdgeInsets.symmetric(vertical: 16.0),</code>
        </line>
        <line hits="1" number="233">
            <code>            child: TextButton(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="234">
            <code>              onPressed: _saveChanges,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="235">
            <code>              child: Text(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="236">
            <code>                'Ã„nderungen speichern â€¢ ${totalPrice.toStringAsFixed(2)} â‚¬',</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="237">
            <code>                style: TextStyle(fontSize: 16, color: Colors.white),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="238">
            <code>              ),</code>
        </line>
        <line number="239">
            <code>            ),</code>
        </line>
        <line number="240">
            <code>          ),</code>
        </line>
        <line number="241">
            <code>        ),</code>
        </line>
        <line number="242">
            <code>      ),</code>
        </line>
        <line number="243">
            <code>    );</code>
        </line>
        <line number="244">
            <code>  }</code>
        </line>
        <line number="245">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
