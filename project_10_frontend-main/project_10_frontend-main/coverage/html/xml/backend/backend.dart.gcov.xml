<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-07-01" filename="backend.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.35849056" lines-covered="38" lines-valid="106" package="backend" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'package:project_10_frontend/model/Bestellung.dart';</code>
        </line>
        <line number="2">
            <code>import 'package:project_10_frontend/model/pizza.dart';</code>
        </line>
        <line number="3">
            <code>import 'package:project_10_frontend/model/zutaten.dart';</code>
        </line>
        <line number="4">
            <code>import 'package:project_10_frontend/model/getraenke.dart';</code>
        </line>
        <line number="5">
            <code/>
        </line>
        <line number="6">
            <code>import 'dart:convert';</code>
        </line>
        <line number="7">
            <code>import 'package:http/http.dart' as http;</code>
        </line>
        <line number="8">
            <code/>
        </line>
        <line number="9">
            <code>class Backend {</code>
        </line>
        <line number="10">
            <code/>
        </line>
        <line number="11">
            <code>  // use IP 10.0.2.2 to access localhost from emulator.</code>
        </line>
        <line number="12">
            <code>  // static const _backend = "http://10.0.2.2:8080/";</code>
        </line>
        <line number="13">
            <code/>
        </line>
        <line number="14">
            <code>  // use IP 127.0.0.1 to access localhost from windows device.</code>
        </line>
        <line number="15">
            <code>  static const _backend = "http://127.0.0.1:8080/";</code>
        </line>
        <line number="16">
            <code/>
        </line>
        <line number="17">
            <code/>
        </line>
        <line hits="0" number="18">
            <code>    Future&lt;Pizza&gt; createPizza(http.Client client, String name, String description) async {</code>
        </line>
        <line number="19">
            <code/>
        </line>
        <line hits="0" number="20">
            <code>      Map data = {</code>
        </line>
        <line number="21">
            <code>        'name': name,</code>
        </line>
        <line number="22">
            <code>        'description': description,</code>
        </line>
        <line number="23">
            <code>      };</code>
        </line>
        <line number="24">
            <code/>
        </line>
        <line hits="0" number="25">
            <code>      var response = await client.post(Uri.parse('${_backend}item'),</code>
        </line>
        <line hits="0" number="26">
            <code>          headers: &lt;String, String&gt;{'Content-Type': 'application/json'},</code>
        </line>
        <line hits="0" number="27">
            <code>          body: json.encode(data)</code>
        </line>
        <line number="28">
            <code>      );</code>
        </line>
        <line number="29">
            <code/>
        </line>
        <line hits="0" number="30">
            <code>      if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="31">
            <code>        return Pizza.fromJson(json.decode(utf8.decode(response.bodyBytes)));</code>
        </line>
        <line number="32">
            <code>      } else {</code>
        </line>
        <line hits="0" number="33">
            <code>        throw Exception('Failed to create item');</code>
        </line>
        <line number="34">
            <code>      }</code>
        </line>
        <line number="35">
            <code/>
        </line>
        <line number="36">
            <code>    }</code>
        </line>
        <line number="37">
            <code/>
        </line>
        <line hits="0" number="38">
            <code>  Future&lt;List&lt;Pizza&gt;&gt; fetchPizzaList(http.Client client) async {</code>
        </line>
        <line hits="0" number="39">
            <code>    final response = await client.get(Uri.parse('${_backend}pizza'));</code>
        </line>
        <line number="40">
            <code/>
        </line>
        <line hits="0" number="41">
            <code>    if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="42">
            <code>      return List&lt;Pizza&gt;.from(json.decode(utf8.decode(response.bodyBytes)).map((x) =&gt; Pizza.fromJson(x)));</code>
        </line>
        <line number="43">
            <code>    } else {</code>
        </line>
        <line hits="0" number="44">
            <code>      throw Exception('Failed to load pizza list');</code>
        </line>
        <line number="45">
            <code>    }</code>
        </line>
        <line number="46">
            <code>  }</code>
        </line>
        <line number="47">
            <code/>
        </line>
        <line hits="0" number="48">
            <code>  Future&lt;Pizza&gt; fetchPizzaById(http.Client client, int id) async {</code>
        </line>
        <line hits="0" number="49">
            <code>    final response = await client.get(Uri.parse('${_backend}pizza/$id'));</code>
        </line>
        <line number="50">
            <code/>
        </line>
        <line hits="0" number="51">
            <code>    if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="52">
            <code>      return Pizza.fromJson(json.decode(utf8.decode(response.bodyBytes)));</code>
        </line>
        <line number="53">
            <code>    } else {</code>
        </line>
        <line hits="0" number="54">
            <code>      throw Exception('Failed to load pizza');</code>
        </line>
        <line number="55">
            <code>    }</code>
        </line>
        <line number="56">
            <code>  }</code>
        </line>
        <line number="57">
            <code/>
        </line>
        <line hits="0" number="58">
            <code>  Future&lt;List&lt;Zutaten&gt;&gt; fetchZutatenData(http.Client client) async {</code>
        </line>
        <line hits="0" number="59">
            <code>  final response = await client.get(Uri.parse('${_backend}zutaten'));</code>
        </line>
        <line number="60">
            <code/>
        </line>
        <line hits="0" number="61">
            <code>  if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="62">
            <code>    List jsonResponse = json.decode(utf8.decode(response.bodyBytes));</code>
        </line>
        <line hits="0" number="63">
            <code>    return jsonResponse.map((item) =&gt; Zutaten.fromJson(item)).toList();</code>
        </line>
        <line number="64">
            <code>  } else {</code>
        </line>
        <line hits="0" number="65">
            <code>    throw Exception('Failed to load Zutaten');</code>
        </line>
        <line number="66">
            <code>  }</code>
        </line>
        <line number="67">
            <code>}</code>
        </line>
        <line hits="0" number="68">
            <code>Future&lt;Zutaten&gt; fetchZutatById(http.Client client, int id) async {</code>
        </line>
        <line hits="0" number="69">
            <code>  final response = await client.get(Uri.parse('${_backend}zutaten/$id'));</code>
        </line>
        <line number="70">
            <code/>
        </line>
        <line hits="0" number="71">
            <code>  if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="72">
            <code>    return Zutaten.fromJson(json.decode(utf8.decode(response.bodyBytes)));</code>
        </line>
        <line number="73">
            <code>  } else {</code>
        </line>
        <line hits="0" number="74">
            <code>    throw Exception('Failed to load Zutat');</code>
        </line>
        <line number="75">
            <code>  }</code>
        </line>
        <line number="76">
            <code>}</code>
        </line>
        <line number="77">
            <code/>
        </line>
        <line hits="0" number="78">
            <code>Future&lt;List&lt;Getraenke&gt;&gt; fetchGetraenkeData(http.Client client) async {</code>
        </line>
        <line hits="0" number="79">
            <code>    final response = await client.get(Uri.parse('${_backend}getraenke'));</code>
        </line>
        <line number="80">
            <code/>
        </line>
        <line hits="0" number="81">
            <code>    if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="82">
            <code>      List jsonResponse = json.decode(utf8.decode(response.bodyBytes));</code>
        </line>
        <line hits="0" number="83">
            <code>      return jsonResponse.map((item) =&gt; Getraenke.fromJson(item)).toList();</code>
        </line>
        <line number="84">
            <code>    } else {</code>
        </line>
        <line hits="0" number="85">
            <code>      throw Exception('Failed to load Getraenke');</code>
        </line>
        <line number="86">
            <code>    }</code>
        </line>
        <line number="87">
            <code>  }</code>
        </line>
        <line number="88">
            <code/>
        </line>
        <line hits="1" number="89">
            <code>  Future&lt;Getraenke&gt; fetchGetraenkeById(http.Client client, int id) async {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="90">
            <code>    final response = await client.get(Uri.parse('${_backend}getraenke/$id'));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="91">
            <code/>
        </line>
        <line hits="2" number="92">
            <code>    if (response.statusCode == 200) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="93">
            <code>      return Getraenke.fromJson(json.decode(utf8.decode(response.bodyBytes)));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="94">
            <code>    } else {</code>
        </line>
        <line hits="1" number="95">
            <code>      throw Exception('Failed to load Getraenke');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="96">
            <code>    }</code>
        </line>
        <line number="97">
            <code>  }</code>
        </line>
        <line number="98">
            <code/>
        </line>
        <line hits="0" number="99">
            <code>  createItem(http.Client client, String text, String text2) {}</code>
        </line>
        <line number="100">
            <code/>
        </line>
        <line number="101">
            <code/>
        </line>
        <line hits="2" number="102">
            <code>Future&lt;void&gt; addBestellung(http.Client client, List&lt;Pizza&gt; pizza, List&lt;Getraenke&gt; getraenke, double preis, String datumUhrzeit, String adresse, String kundenname) async {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="103">
            <code>  final url = Uri.parse('${_backend}bestellung');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="104">
            <code>  final body = json.encode({</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8" number="105">
            <code>      'pizzas': pizza.map((pizza) =&gt; pizza.toJson()).toList(),</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="106">
            <code>      'getraenke': getraenke.map((getraenk) =&gt; getraenk.toJson()).toList(),</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="107">
            <code>      'totalPrice': preis,</code>
        </line>
        <line number="108">
            <code>      'datumUhrzeit': datumUhrzeit,</code>
        </line>
        <line number="109">
            <code>      'adresse': adresse,</code>
        </line>
        <line number="110">
            <code>      'kundenname': kundenname,</code>
        </line>
        <line number="111">
            <code>    });</code>
        </line>
        <line number="112">
            <code/>
        </line>
        <line hits="2" number="113">
            <code>    final response = await client.post(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="114">
            <code>      url,</code>
        </line>
        <line hits="2" number="115">
            <code>      headers: {'Content-Type': 'application/json'},</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="116">
            <code>      body: body,</code>
        </line>
        <line number="117">
            <code>    );</code>
        </line>
        <line number="118">
            <code/>
        </line>
        <line hits="4" number="119">
            <code>    if  (response.statusCode != 200) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="120">
            <code>      throw Exception('Failed to add Bestellung');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="121">
            <code>    }</code>
        </line>
        <line number="122">
            <code>}</code>
        </line>
        <line number="123">
            <code/>
        </line>
        <line number="124">
            <code/>
        </line>
        <line hits="2" number="125">
            <code> Future&lt;void&gt; deleteBestellung(http.Client client, int id) async {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="126">
            <code>  final response = await client.delete(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="127">
            <code>    Uri.parse('${_backend}bestellung/$id')</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="128">
            <code>  );</code>
        </line>
        <line number="129">
            <code/>
        </line>
        <line hits="6" number="130">
            <code>  print('Response status code: ${response.statusCode}');</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="131">
            <code>  print('Response body: ${response.body}');</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="132">
            <code/>
        </line>
        <line hits="4" number="133">
            <code>  if (response.statusCode != 200) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="134">
            <code>    throw Exception('Failed to delete Bestellung');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="135">
            <code>  }</code>
        </line>
        <line number="136">
            <code/>
        </line>
        <line number="137">
            <code>}</code>
        </line>
        <line number="138">
            <code/>
        </line>
        <line hits="0" number="139">
            <code>  Future&lt;Bestellung&gt; editBestellung(http.Client client, int id, List&lt;Pizza&gt; pizza, List&lt;Getraenke&gt; getraenke, double preis) async {</code>
        </line>
        <line hits="0" number="140">
            <code>    Map data = {</code>
        </line>
        <line hits="0" number="141">
            <code>      'pizza': pizza.map((pizza) =&gt; pizza.toJson()).toList,</code>
        </line>
        <line hits="0" number="142">
            <code>      'getraenke': getraenke.map((getraenke) =&gt; getraenke.toJson()).toList(),</code>
        </line>
        <line number="143">
            <code>      'preis': preis,</code>
        </line>
        <line number="144">
            <code>    };</code>
        </line>
        <line number="145">
            <code/>
        </line>
        <line hits="0" number="146">
            <code>    final response = await client.put(</code>
        </line>
        <line hits="0" number="147">
            <code>      Uri.parse('${_backend}bestellung/$id'),</code>
        </line>
        <line hits="0" number="148">
            <code>      headers: &lt;String, String&gt;{'Content-Type': 'application/json'},</code>
        </line>
        <line hits="0" number="149">
            <code>      body: json.encode(data),</code>
        </line>
        <line number="150">
            <code>    );</code>
        </line>
        <line number="151">
            <code/>
        </line>
        <line hits="0" number="152">
            <code>    if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="153">
            <code>      return Bestellung.fromJson(json.decode(utf8.decode(response.bodyBytes)));</code>
        </line>
        <line number="154">
            <code>    } else {</code>
        </line>
        <line hits="0" number="155">
            <code>      throw Exception('Failed to edit Bestellung');</code>
        </line>
        <line number="156">
            <code>    }</code>
        </line>
        <line number="157">
            <code>  }</code>
        </line>
        <line number="158">
            <code/>
        </line>
        <line hits="2" number="159">
            <code>  Future&lt;List&lt;Bestellung&gt;&gt; fetchBestellungList(http.Client client) async {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="160">
            <code>    final response = await client.get(Uri.parse('${_backend}bestellung'));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="161">
            <code/>
        </line>
        <line hits="4" number="162">
            <code>    if (response.statusCode == 200) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="14" number="163">
            <code>      return List&lt;Bestellung&gt;.from(json.decode(utf8.decode(response.bodyBytes)).map((x) =&gt; Bestellung.fromJson(x)));</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line number="164">
            <code>    } else {</code>
        </line>
        <line hits="2" number="165">
            <code>      throw Exception('Failed to load Bestellungliste');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="166">
            <code>    }</code>
        </line>
        <line number="167">
            <code>  }</code>
        </line>
        <line hits="1" number="168">
            <code>Future&lt;void&gt; updateBestellung(http.Client client, int id, Map&lt;String, dynamic&gt; bestellungDetails) async {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="169">
            <code>  final url = Uri.parse('${_backend}bestellung/$id');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="170">
            <code>  final body = json.encode(bestellungDetails);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="171">
            <code/>
        </line>
        <line hits="1" number="172">
            <code>  final response = await client.put(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="173">
            <code>    url,</code>
        </line>
        <line hits="1" number="174">
            <code>    headers: {'Content-Type': 'application/json'},</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="175">
            <code>    body: body,</code>
        </line>
        <line number="176">
            <code>  );</code>
        </line>
        <line number="177">
            <code/>
        </line>
        <line hits="2" number="178">
            <code>  if (response.statusCode != 200) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="179">
            <code>    throw Exception('Failed to update Bestellung');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="180">
            <code>  }</code>
        </line>
        <line number="181">
            <code>}</code>
        </line>
        <line number="182">
            <code/>
        </line>
        <line number="183">
            <code/>
        </line>
        <line number="184">
            <code/>
        </line>
        <line hits="1" number="185">
            <code>   Future&lt;Bestellung&gt; fetchBestellungById(http.Client client, int id) async {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="186">
            <code>    final response = await client.get(Uri.parse('${_backend}bestellung/$id'));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="187">
            <code/>
        </line>
        <line hits="2" number="188">
            <code>    if (response.statusCode == 200) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="189">
            <code>      return Bestellung.fromJson(json.decode(utf8.decode(response.bodyBytes)));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="190">
            <code>    } else {</code>
        </line>
        <line hits="1" number="191">
            <code>      throw Exception('Failed to load Bestellung');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="192">
            <code>    }</code>
        </line>
        <line number="193">
            <code>  }</code>
        </line>
        <line number="194">
            <code/>
        </line>
        <line hits="0" number="195">
            <code>  Future&lt;String&gt; deletePizzaById(http.Client client, int id) async {</code>
        </line>
        <line hits="0" number="196">
            <code>  final url = Uri.parse('${_backend}pizza/$id');</code>
        </line>
        <line hits="0" number="197">
            <code>  final response = await client.delete(url);</code>
        </line>
        <line number="198">
            <code/>
        </line>
        <line hits="0" number="199">
            <code>  if (response.statusCode == 200) {</code>
        </line>
        <line number="200">
            <code>    return "Pizza erfolgreich gelÃ¶scht";</code>
        </line>
        <line number="201">
            <code>  } else {</code>
        </line>
        <line hits="0" number="202">
            <code>    throw Exception('Fehler beim LÃ¶schen der Pizza: ${response.body}');</code>
        </line>
        <line number="203">
            <code>  }</code>
        </line>
        <line number="204">
            <code>}</code>
        </line>
        <line number="205">
            <code/>
        </line>
        <line hits="0" number="206">
            <code>Future&lt;String&gt; deleteGetraenkeById(http.Client client, int id) async {</code>
        </line>
        <line hits="0" number="207">
            <code>  final url = Uri.parse('${_backend}getraenke/$id');</code>
        </line>
        <line hits="0" number="208">
            <code>  final response = await client.delete(url);</code>
        </line>
        <line number="209">
            <code/>
        </line>
        <line hits="0" number="210">
            <code>  if (response.statusCode == 200) {</code>
        </line>
        <line number="211">
            <code>    return "GetrÃ¤nk erfolgreich gelÃ¶scht";</code>
        </line>
        <line number="212">
            <code>  } else {</code>
        </line>
        <line hits="0" number="213">
            <code>    throw Exception('Fehler beim LÃ¶schen des GetrÃ¤nks: ${response.body}');</code>
        </line>
        <line number="214">
            <code>  }</code>
        </line>
        <line number="215">
            <code>}</code>
        </line>
        <line number="216">
            <code/>
        </line>
        <line hits="0" number="217">
            <code>Future&lt;http.Response&gt; updatePizzaById(http.Client client, int id, Pizza pizzaDetails) async {</code>
        </line>
        <line hits="0" number="218">
            <code>  String url = '${_backend.endsWith('/') ? _backend : _backend + '/'}pizza/$id';</code>
        </line>
        <line hits="0" number="219">
            <code>  final response = await client.put(</code>
        </line>
        <line hits="0" number="220">
            <code>    Uri.parse(url),</code>
        </line>
        <line hits="0" number="221">
            <code>    headers: &lt;String, String&gt;{</code>
        </line>
        <line number="222">
            <code>      'Content-Type': 'application/json; charset=UTF-8',</code>
        </line>
        <line number="223">
            <code>    },</code>
        </line>
        <line hits="0" number="224">
            <code>    body: jsonEncode(pizzaDetails.toJson()),</code>
        </line>
        <line number="225">
            <code>  );</code>
        </line>
        <line number="226">
            <code/>
        </line>
        <line number="227">
            <code>  return response;</code>
        </line>
        <line number="228">
            <code>}</code>
        </line>
        <line number="229">
            <code/>
        </line>
        <line number="230">
            <code/>
        </line>
        <line hits="0" number="231">
            <code>Future&lt;http.Response&gt; deleteZutatenByPizza(http.Client client, Pizza pizza) async {</code>
        </line>
        <line hits="0" number="232">
            <code>  final url = Uri.parse('${_backend}zutaten');</code>
        </line>
        <line hits="0" number="233">
            <code>  final response = await client.delete(</code>
        </line>
        <line number="234">
            <code>    url,</code>
        </line>
        <line hits="0" number="235">
            <code>    headers: &lt;String, String&gt;{</code>
        </line>
        <line number="236">
            <code>      'Content-Type': 'application/json; charset=UTF-8',</code>
        </line>
        <line number="237">
            <code>    },</code>
        </line>
        <line hits="0" number="238">
            <code>    body: jsonEncode(pizza.toJson()),</code>
        </line>
        <line number="239">
            <code>  );</code>
        </line>
        <line number="240">
            <code/>
        </line>
        <line number="241">
            <code>  return response;</code>
        </line>
        <line number="242">
            <code>}</code>
        </line>
        <line number="243">
            <code/>
        </line>
        <line number="244">
            <code/>
        </line>
        <line number="245">
            <code/>
        </line>
        <line number="246">
            <code/>
        </line>
        <line number="247">
            <code/>
        </line>
        <line number="248">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
