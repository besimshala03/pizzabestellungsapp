import 'dart:convert';
import 'package:flutter_test/flutter_test.dart';
import 'package:http/http.dart' as http;
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:project_10_frontend/backend/backend.dart'; // Import the correct path
import 'package:project_10_frontend/model/pizza.dart'; // Ensure this is the correct import

import 'delete_zutaten_by_pizza_test.mocks.dart'; // This will be generated by mockito

@GenerateMocks([http.Client])
void main() {
  group('deleteZutatenByPizza', () {
    late MockClient mockClient;
    late Backend backend;

    setUp(() {
      mockClient = MockClient();
      backend = Backend();
    });

    test('returns successful response if the http call completes successfully', () async {
      final Pizza pizzaDetails = Pizza(
        id: 1,
        name: 'Margherita',
        beschreibung: 'Classic Margherita with tomatoes and cheese',
        preis: 8.99,
        imageUrl: 'Margherita.jpeg',
        zutaten: [], 
      );

      final url = 'http://127.0.0.1:8080/zutaten';

      // Mocking the http delete response to return a successful status code.
      when(mockClient.delete(
        Uri.parse(url),
        headers: anyNamed('headers'),
        body: jsonEncode(pizzaDetails.toJson()),
      )).thenAnswer((_) async => http.Response('{"status": "success"}', 200));

      // Call the method
      final response = await backend.deleteZutatenByPizza(mockClient, pizzaDetails);

      // Verify the method returns the expected response
      expect(response.statusCode, 200);
      expect(jsonDecode(response.body)['status'], 'success');
    });

    test('returns error response if the http call completes with an error', () async {
      final Pizza pizzaDetails = Pizza(
        id: 1,
        name: 'Margherita',
        beschreibung: 'Classic Margherita with tomatoes and cheese',
        preis: 8.99,
        imageUrl: 'Margherita.jpeg',
        zutaten: [], 
      );

      final url = 'http://127.0.0.1:8080/zutaten';

      // Mocking the http delete response to return an error status code.
      when(mockClient.delete(
        Uri.parse(url),
        headers: anyNamed('headers'),
        body: jsonEncode(pizzaDetails.toJson()),
      )).thenAnswer((_) async => http.Response('{"status": "error"}', 400));

      // Call the method
      final response = await backend.deleteZutatenByPizza(mockClient, pizzaDetails);

      // Verify the method returns the expected response
      expect(response.statusCode, 400);
      expect(jsonDecode(response.body)['status'], 'error');
    });
  });
}
